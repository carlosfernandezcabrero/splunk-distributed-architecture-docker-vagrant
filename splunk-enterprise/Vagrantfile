# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'open-uri'
require './env'

spl_enterprise_path = "../common/downloads/splunk-enterprise.tgz"

if not File.exist?(spl_enterprise_path) or File.size(spl_enterprise_path) == 0
  open(spl_enterprise_path, "w") do |out|
    RELEASE_URL = ENV['RELEASE_URL']
    spl_ent = URI.open("https://download.splunk.com/products/splunk/releases/#{RELEASE_URL}").read
    out.write(spl_ent)
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"

  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.provision   "file", source: "./Dockerfile", 
                        destination: "/tmp/Dockerfile"
  config.vm.provision   "file", source: "./configs/splunk-launch.conf", 
                        destination: "/tmp/splunk-launch.conf"
  config.vm.provision   "file", source: "./configs/user-seed.conf",
                        destination: "/tmp/user-seed.conf"
  config.vm.provision   "file", source: "../common/downloads/splunk-enterprise.tgz",
                        destination: "/tmp/splunk-enterprise.tgz"


  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 1
  end


  config.vm.provision "set_date", before: :all, type: "shell", inline: <<-SHELL
    timedatectl set-timezone Europe/Madrid
  SHELL
  config.vm.provision "install_docker", before: :all, path: "../common/scripts/install_docker.sh", type: "shell"


  config.vm.define "master" do |man|
    man.vm.network :private_network, ip: "192.168.33.2"
    man.vm.provision  "file", source: "./configs/master/server.conf", 
                      destination: "/tmp/server.conf"
    man.vm.provider :virtualbox do |vb|
      vb.name = "splunk-master"
    end
    man.vm.provision "server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk-master"
    man.vm.provision "docker" do |d|
      d.build_image "/tmp", args: '--target=splunk-enterprise -t splunk-master'
      d.run "splunk-master", image: "splunk-master", args: "--network host --mount source=splunkinstshclvol,target=/usr/local/splunk/etc/shcluster/apps --mount source=splunkinstmappsvol,target=/usr/local/splunk/etc/master-apps --mount source=splunkinstdepvol,target=/usr/local/splunk/etc/deployment-apps --mount source=splunkinstlocalvol,target=/usr/local/splunk/etc/system/local --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk"
    end
  end

  File.open('../common/files/shcluster_members.txt') do |f|
    servers = f.read
    num_servers = servers.split(/:/).size - 1

    servers.split(/\n/) do |server|
      server = server.gsub("\n","").gsub("\r","").gsub(" ","").gsub(":", "")
      num_idx = server[-1]

      target = "splunk-enterprise"
      if num_idx.to_i == num_servers
        target = "shcluster-captain"
      end

      config.vm.define "sh#{num_idx}" do |shclmember|
        shclmember.vm.network :private_network, ip: "#{server}"
        shclmember.vm.provision "file", source: "../common/files/shcluster_members.txt", 
                                destination: "/tmp/shcluster_members.txt"
        shclmember.vm.provision "file", source: "./configs/shc-member/bootstrap_captain.py", 
                                destination: "/tmp/bootstrap_captain.py"
        shclmember.vm.provider :virtualbox do |vb|
          vb.name = "splunk-sh-#{num_idx}"
        end
        shclmember.vm.provision "server.conf", type: "shell", path: "./configs/shc-member/server.py", args: "https://#{server}:8089"
        shclmember.vm.provision "basic_server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk_sh_#{num_idx}"
        shclmember.vm.provision "docker" do |d|
          d.build_image "/tmp", args: "--target=#{target} -t splunk-sh"
          d.run "splunk-sh", image: "splunk-sh", args: "--network host --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk"
        end
      end
    end
  end

  config.vm.define "test_idx" do |tidx|
    tidx.vm.provision  "file", source: "./configs/idx/inputs.conf", 
                        destination: "/tmp/inputs.conf"
    tidx.vm.network :private_network, ip: "192.168.33.5"
    tidx.vm.provider :virtualbox do |vb|
      vb.name = "splunk-idx-test"
    end
    tidx.vm.provision "set_replication_port", type: "shell", inline: <<-SHELL
      echo "[replication_port://8080]" >> /tmp/server.conf
    SHELL
    tidx.vm.provision "server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk_idx_test"
    tidx.vm.provision "docker" do |d|
      d.build_image "/tmp", args: '--target=idx -t splunk-idx'
      d.run "splunk-idx", image: "splunk-idx", args: "--network host --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk --mount source=splunkinstappsvol,target=/usr/local/splunk/etc/apps --mount source=splunkinstdatavol,target=/usr/local/splunk/var/lib/splunk"
    end
  end

  config.vm.define "test_sh" do |tsh|
    tsh.vm.network :private_network, ip: "192.168.33.6"
    tsh.vm.provider :virtualbox do |vb|
      vb.name = "splunk-sh-test"
    end
    tsh.vm.provision "server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk_sh_test"
    tsh.vm.provision "docker" do |d|
      d.build_image "/tmp", args: '--target=test-sh -t splunk-sh'
      d.run "splunk-sh", image: "splunk-sh", args: "--network host --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk --mount source=splunkinstappsvol,target=/usr/local/splunk/etc/apps"
    end
  end

  File.open('../common/files/indexers.txt') do |f|
    f.each_line do |server|
      server = server = server.gsub("\n","").gsub("\r","").gsub(" ","").gsub(":", "")
      num_idx = server[-1]

      config.vm.define "idx#{num_idx}" do |idx|
        idx.vm.network :private_network, ip: "#{server}"
        idx.vm.provision  "file", source: "./configs/idx/server.conf", 
                          destination: "/tmp/server.conf"
        idx.vm.provision  "file", source: "./configs/idx/inputs.conf", 
                          destination: "/tmp/inputs.conf"
        idx.vm.provider :virtualbox do |vb|
          vb.name = "splunk-idx-#{num_idx}"
        end
        idx.vm.provision "server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk_idx_#{num_idx}"
        idx.vm.provision "docker" do |d|
          d.build_image "/tmp", args: '--target=idx -t splunk-idx'
          d.run "splunk-idx", image: "splunk-idx", args: "--network host --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk --mount source=splunkinstdatavol,target=/usr/local/splunk/var/lib/splunk"
        end
      end
    end
  end

  config.vm.define "hf" do |hf|
    hf.vm.network :private_network, ip: "192.168.33.3"
    hf.vm.provider :virtualbox do |vb|
      vb.name = "splunk-hf"
    end
    hf.vm.provision "server.conf", type: "shell", path: "../common/configs/server.py", args: "splunk_hf"
    hf.vm.provision "outputs.conf", type: "shell", path: "../common/configs/outputs.py", args: "/tmp/outputs.conf"
    hf.vm.provision "docker" do |d|
      d.build_image "/tmp", args: '--target=hf -t splunk-hf'
      d.run "splunk-hf", image: "splunk-hf", args: "--network host --mount source=splunkinstlogsvol,target=/usr/local/splunk/var/log/splunk --mount source=splunkinstappsvol,target=/usr/local/splunk/etc/apps"
    end
  end
end
